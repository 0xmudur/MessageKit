# Specify the config version
version: 2.1

# Define the jobs for the current project
jobs:
  build_tests:
    macos:
      xcode: 11.3.1
    environment:
      - DESTINATION: "platform=iOS Simulator,name=iPhone 11 Pro"
    # Define the steps required to build the project.
    steps:
      # Get the code from the VCS provider.
      - checkout
      - run:
          name: Update Homebrew
          command: brew update
      - run:
          name: Bootstrap Carthage
          command: carthage bootstrap --platform ios
      - run:
          # More info about pre-start of the simulator at https://circleci.com/docs/2.0/testing-ios/#pre-starting-the-simulator
          name: Pre-start simulator
          command: xcrun instruments -w "iPhone 11 Pro (13.3) [" || true
      - run:
          name: Build framework
          command: xcodebuild build -project MessageKit.xcodeproj -scheme MessageKit -destination "$DESTINATION" CODE_SIGNING_REQUIRED=NO | xcpretty -c
      - run:
          name: Build and run tests
          command: xcodebuild test -project MessageKit.xcodeproj -scheme MessageKitTests -destination "$DESTINATION" CODE_SIGNING_REQUIRED=NO | xcpretty -c
      - restore_cache:
          name: Restore bundle cache
          key: 1-gems-{{ checksum "Example/Gemfile.lock" }}
      - run:
          name: Install bundle
          command: cd Example && bundle check || bundle install
      - save_cache:
          name: Save bundle cache
          key: 1-gems-{{ checksum "Example/Gemfile.lock" }}
      - restore_cache:
          name: Restore Pods cache
          keys:
              - v1-pods-cache-{{ arch }}-{{ .Branch }}-{{ checksum "Example/Podfile.lock" }}
              - v1-pods-cache-{{ arch }}-{{ .Branch }}-
      - run:
          name: Update Pods
          command: bundle exec pod install
      - save_cache:
          name: Save Pods cache
          paths:
              - Pods
          key: v1-pods-cache-{{ arch }}-{{ .Branch }}-{{ checksum "Example/Podfile.lock" }}
      - run:
          name: Build and analyze Example
          command: xcodebuild build analyze -workspace Example/ChatExample.xcworkspace -scheme ChatExample -destination "$DESTINATION" ONLY_ACTIVE_ARCH=NO CODE_SIGNING_REQUIRED=NO | xcpretty -c

      # Collect XML test results data to show in the UI,
      # and save the same XML files under test-results folder
      # in the Artifacts tab.
      #- store_test_results:
      #    path: test_output/report.xml
      #- store_artifacts:
      #    path: /tmp/test-results
      #    destination: scan-test-results
      #- store_artifacts:
      #    path: ~/Library/Logs/scan
      #    destination: scan-logs

workflows:
  build_and_tests:
    jobs:
      - build_tests
